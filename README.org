#+TITLE: Data, Models, and Tests (DMT)

We present a framework and library to help with analyzing models and validating
them against empirical data.


* Philosophy
DMT decouples scientific computer models from /in-silico/ analyses,
such that any analysis can be run on any model to which it is applicable,
and any model can be analyzed by all applicable analyses. 

* Usage
  
#+BEGIN_SRC python :exports code
  from dmt import AdapterInterface 

  class SomeValueAnalysisInterface(AdapterInterface):
      """
      Methods documented in this class must be provided
      by an adapter.
      """
      def get_somevalue(self, model):
        """
        Get some value for a model.
        """
        raise NotImplementedError

  def some_value_analysis(model, adapter, threshold=123456):
    """
    Analysis for a model using a given adapter.
    An analysis may be a simple function.
    """
      model_prediction = adapter.get_somevalue(model)
      report = dict(
          measurement=model_prediction,
          verdict=model_prediction > threshold)
      return report

#+END_SRC

then
#+BEGIN_SRC python :exports code
from models import MyModel, TheirModel
from analyses import SomeValueAnalysis

class InvalidAdapter():
   pass

class MyModelAdapter():

   def get_somevalue(self, model):
       return model.something / model.someotherthing

class TheirModelAdapter():

   def get_somevalue(self, model):
       return model.get_somevalue('someparameter')

# produces a report
report_mine = SomeValueAnalysis(my_model, MyModelAdapter())
# produces a report
report_theirs = SomeValueAnalysis(their_model, TheirModelAdapter())
# raises an informative error
SomeValueAnalysis(InvalidAdapter())
#+END_SRC


* Installation
  Place ~dmt~ and ~neuro_dmt~ somewhere in your path.
