"""A random parameter is just another parameter that can generate
random values."""

from abc import ABC, abstractmethod
import types
import inspect
import pandas as pd
from dmt.vtk.utils.descriptor import Field
from dmt.vtk.measurement.parameter import Parameter
from dmt.vtk.measurement.condition import Condition
from dmt.vtk.utils.collections import Record, take
from dmt.vtk.utils.logging import Logger

class RandomVariate(ABC):
    """Like a Parameter, but yields random values.
    """
    label = Field(
        __name__ = "label",
        __type__ = str,
        __is_valid_value__ = lambda instance, value: ' ' not in value,
        __doc__ = """Label for the random variable generated. May be used as a
        keyword for passing parameters to measurement methods."""
    )
    value_type = Field(
        __name__ = "value_type",
        __type__ = type,
        __doc__  = """Type of the variable generated by this RandomParameter."""
    )
    def __init__(self, *args, **kwargs):
        if "label" in kwargs:
            self.label = kwargs["label"]


    @property
    def logger(self):
        """Log from this class, if you want to"""
        if not hasattr(self, "_logger"):
            self._logger = Logger("{}Logger".format())


    @abstractmethod
    def values(self, *args, **kwargs):
        """Returns a generator."""
        pass

    def repr(self, value):
        """Represent value 'value' of this random variate.
        Override if you wish to."""
        assert(isinstance(value, self.value_type))
        return str(value)


class ConditionedRandomVariate(RandomVariate):
    """RandomVariate conditioned on other variables."""
    condition_type = Field(
        __name__="condition_type",
        __type__=Record,
        __doc__="""Record mapping field names to their types.""",
        __examples__=[Record(layer=int, target=str)]
    )
    def __init__(self, label=None, values = None,
                 *args, **kwargs):
        """Initialize this class with a 'values' parameter, or
        implement a 'values' method in a subclass.

        Parameters
        ------------------------------------------------------------------------
        label :: String
        """ 

        if label is not None:
            self.label = label

        super(ConditionedRandomVariate, self).__init__(*args, **kwargs)

    def assert_condition_is_valid(self, condition):
        """..."""
        if not hasattr(self, "conditions"):
            raise Exception("No 'conditions' attribute was set.")
        return self.conditions.is_valid(condition)


    def is_valid(self, condition_generator):
        """..."""
        cg = condition_generator
        fields = self.condition_type.fields
        return(all(f in cg.labels for f in fields ) and
               all(issubclass(cg.get_type(f), self.condition_type.get(f))
                   for f in fields))
                   
    @abstractmethod
    def values(self, condition, *args, **kwargs):
        """Yield random values for given condition."""
        pass

    def conditioned_values(self, condition, *args, **kwargs):
        """Yield random values of this RandomVariate for given conditions,
        with the condition as a Pandas DataFrame."""
        for v in self.values(condition, *args, **kwargs):
            yield pd.DataFrame({self.label: [v]}, index=self.index([condition]))
                    
    def sample(self, conditions, size=20, *args, **kwargs):
        assert(self.is_valid(conditions))
        def __sample(condition):
            return pd.concat(list(
                take(size, self.conditioned_values(condition, *args, **kwargs))
            ))
        return pd.concat([__sample(condition) for condition in conditions])


def get_conditioned_random_variate(conditioning_variables, random_variate,
                                   *args, **kwargs):
    """Creates a class instance on the fly."""
    kwargs.update(dict(conditioning_variables=conditioning_variables,
                       label=random_variate.label))
    name = "Conditioned{}RandomVariate".format(
        "".join(w.capitalize() for w in random_variate.label.split('_'))
    )
    T = type(name, (ConditionedRandomVariate, random_variate.__class__), {} )
    return T(*args, **kwargs)

                                         
