"""
Test `BlueBrainCircuitModel`, `BlueBrainAdapter`, and `BrainCircuitAnalysis`
with some "real-world" test-cases.
"""
from pathlib import Path
import pandas as pd
from dmt.tk.field import Field, lazyfield, WithFields
from dmt.tk.reporting import Report
from dmt.tk.utils import get_label

def path_project(number):
    """
    Path to the project, given its number
    """
    return Path("/gpfs/bbp.cscs.ch/project/").joinpath("proj{}".format(number))


class CircuitAnalysisTest(WithFields):
    """
    Construct and test a cell density analysis
    """
    analysis = Field(
        """
        The circuit model analysis to test.
        This class assumes that a reporter was not set for this analysis.
        """)
    circuit_model = Field(
        """
        The circuit model to analyze.
        """)
    adapter = Field(
        """
        The circuit model adapter to test.
        """)
    reporter = Field(
        """
        Reporter to publish the report.
        """)

    def test_get_measurement(self):
        """
        Measurement returned by an analysis should be a pandas data-frame.
        """
        measurement = self.analysis.get_measurement(self.circuit_model)
        assert isinstance(measurement, pd.DataFrame)
        return measurement

    def test_get_report(self):
        """
        Report generated by analysis should have figures.
        """
        report = self.analysis.get_report(self.circuit_model)
        assert isinstance(report, Report)
        assert len(report.figures) > 0
        assert hasattr(report, "measurement")
        return report

    def test_call_analysis(self):
        """
        The analysis should be a callable, and return a report when called.
        """
        report = self.analysis(self.circuit_model, adapter=self.adapter)
        assert isinstance(report, Report)

    def test_post_report(self):
        """
        The reporter should place the report in a folder.
        """
        phenomenon = get_label(self.analysis.phenomenon)
        report = self.analysis(self.circuit_model, adapter=self.adapter)
        path_report = Path(self.reporter.post(report))
        assert path_report\
            == Path.cwd().joinpath(get_label(phenomenon))
        assert path_report.is_dir()
        assert any(p.is_file() for p in path_report.glob("report*")),\
            "Did not find a report file."
        path_report_figures = path_report.joinpath("figures")
        assert path_report_figures.is_dir()

        for name_figure in report.figures:
            path_figure = path_report_figures\
                .joinpath("{}.png".format(name_figure))
            assert path_figure.is_file()

        name_measurement = "{}.csv".format(phenomenon)
        path_measurement = path_report.joinpath(name_measurement)
        assert path_measurement.is_file(),\
            "Analysis did not save a measurement {}.".format(name_measurement)
        measurement = pd.read_csv(path_measurement, header=0)
        for p in self.analysis.names_measurement_parameters:
            assert p in measurement.columns,\
                "Saved measurement did not have a column for parameter {}"\
                .format(p)
        assert phenomenon in measurement.columns,\
            "Saved measurement did not have a column for the phenomenon"




